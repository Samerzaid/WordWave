@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using WordWave.Presentation.Data
@using WordWave.Presentation.UI

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="login-page d-flex align-items-center justify-content-center" style="background-color: #83C5BE; min-height: 100vh;">
    <div class="container" style="max-width: 450px;">
        <h1 class="text-center mb-4 text-dark">Log in</h1>

        <div class="card shadow-sm" style="border-radius: 8px; background-color: #ffffff;">
            <div class="card-body p-4">
                <StatusMessage Message="@errorMessage" />

                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />

                    <h2 class="h5 text-center mb-3">Welcome Back</h2>
                    <ValidationSummary class="text-danger" role="alert" />

                    <!-- Email Input -->
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" style="border-radius: 0.5rem;" />
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>

                    <!-- Password Input -->
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" style="border-radius: 0.5rem;" />
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>

                    <!-- Remember Me Checkbox -->
                    <div class="form-check mb-3">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                        <label class="form-check-label" for="rememberMe">Remember me</label>
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" class="btn btn-primary w-100 mb-3" style="border-radius: 25px;">Log in</button>

                    <!-- Additional Links -->
                    <div class="text-center">
                        <p>
                            <a href="Account/ForgotPassword" class="text-decoration-none">Forgot your password?</a>
                        </p>
                        <p>
                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-decoration-none">Register as a new user</a>
                        </p>
                        <p>
                            <a href="Account/ResendEmailConfirmation" class="text-decoration-none">Resend email confirmation</a>
                        </p>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
